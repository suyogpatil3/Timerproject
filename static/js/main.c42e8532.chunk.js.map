{"version":3,"sources":["components/input.js","components/DisplayTimer.js","App.js","reportWebVitals.js","index.js"],"names":["Input","getDateInput","submit","value","type","onChange","onClick","class","DisplayTimer","checkInput","days","hours","minutes","seconds","date","edate","id","App","onInputChange","event","inputDate","target","setState","dateField","console","log","state","onSubmit","clearInterval","timer","dateExpired","countDownDate","Date","getTime","changeTime","setInterval","currentDate","remainingTime","remainingDays","Math","floor","remainingHours","remainingMinutes","remainingSeconds","className","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c42e8532.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = ({getDateInput,submit,value}) =>{\r\n    return(\r\n        <div>\r\n            <input type=\"date\" onChange={getDateInput} value={value}/>\r\n            <button onClick={submit} class=\"button\">Submit</button>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Input;","import React from 'react';\r\n\r\nconst DisplayTimer=({checkInput,days,hours,minutes,seconds,date,edate})=>{\r\n    return(\r\n        <div id=\"demo\">\r\n        {checkInput ? edate ?<h1>Expired!! Please choose another date</h1> :<div> <h2> Entered date: {date}</h2><br></br>Time ends in:<br/>\r\n        <table>\r\n            <tbody>\r\n            <tr>\r\n                <th>Days</th>\r\n                <th>Hours</th>\r\n                <th>Minutes</th>\r\n                <th>Seconds</th>\r\n            </tr>\r\n            <tr>\r\n                <td>{days}</td>\r\n                <td>{hours}</td>\r\n                <td>{minutes}</td>\r\n                <td>{seconds}</td>\r\n            </tr>\r\n            </tbody>\r\n           \r\n        </table> \r\n        </div> : <h1> Please choose a date</h1>\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\n export default DisplayTimer;","\nimport './App.css';\nimport React from 'react';\nimport Input from \"./components/input\";\nimport DisplayTimer from './components/DisplayTimer';\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      dateField : '',\n       timer:0,\n      days:0,\n      hours:0,\n      minutes:0,\n      seconds:0,\n      checkInput:false,\n      dateExpired:false\n    }\n  }\n\n\nonInputChange = (event) =>{\n  let inputDate = event.target.value;\n  this.setState({dateField: inputDate});\n  console.log(this.state.dateField);\n  event.target.value=\"\";\n}\n\nonSubmit=()=>{\n  this.setState({ days: 0, hours: 0, minutes: 0, seconds: 0});\n  clearInterval(this.state.timer);\n   if(this.state.dateField!==\"\"){\n    this.setState({checkInput:true,dateExpired:false});\n    var countDownDate = new Date(this.state.dateField).getTime();\n    var changeTime = setInterval(() => {\n    var currentDate = new Date().getTime();\n    var remainingTime = countDownDate - currentDate;\n    var remainingDays = Math.floor(remainingTime / (1000 * 60 * 60 * 24));\n    var remainingHours = Math.floor((remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    var remainingMinutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));\n    var remainingSeconds = Math.floor((remainingTime % (1000 * 60)) / 1000);\n     this.setState({days:remainingDays});\n     this.setState({hours: remainingHours});\n     this.setState({minutes:remainingMinutes});\n     this.setState({seconds:remainingSeconds});\n     this.setState({timer:changeTime});\n    if (remainingTime < 0) {\n        this.setState({dateExpired:true});\n        clearInterval(this.state.changeTime);\n        return\n    }\n    }, 1000);\n }\n}\n\n  render(){\n  return (\n\n    <div className=\"App\">\n      \n      <div className = \"container\">\n      \n      <div>\n        <h1 className=\"title\">Count-down Timer</h1>\n      </div>\n        <DisplayTimer checkInput={this.state.checkInput} days={this.state.days} hours={this.state.hours} minutes={this.state.minutes} seconds={this.state.seconds} date={this.state.dateField} edate={this.state.dateExpired}/>\n          <Input getDateInput={this.onInputChange} submit={this.onSubmit} value={this.state.dateField}/>\n     </div>\n    </div>\n  );\n}\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}